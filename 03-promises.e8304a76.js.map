{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SAEvC,IAAIC,EAAS,KACTC,EAAO,KACPC,EAAa,KAsCjB,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAO,C,SAAEF,E,MAAUC,GACnBE,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQL,GAERM,EAAON,EAAA,GAERD,EAAA,GAEP,CAhDAR,EAAQiB,iBAAiB,UAEzB,SAAoBC,GAClBA,EAAEC,iBA4BFhB,EAASiB,OAAOpB,EAAQqB,OAAOC,OAC/BlB,EAAOgB,OAAOpB,EAAQuB,KAAKD,YAC3BjB,EAAae,OAAOpB,EAAQQ,MAAMc,QAVpC,WACE,QAAIlB,EAAO,GAAKC,EAAa,GAAKF,GAAU,EAI9C,CAvBMqB,GAMN,WACE,IAAK,IAAIC,EAAI,EAAGA,GAAKtB,EAAQsB,GAAK,EAChCnB,EAAcmB,EAAGpB,GACdqB,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA6B,OAAOC,QAAQ,uBAAuBrB,QAAeC,MAAS,IAE/DqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBV,EAAA6B,OAAOG,QAAQ,sBAAsBvB,QAAeC,MAAS,IAEjEH,GAAcD,CAElB,CAhBI2B,GAEAjC,EAAA6B,OAAOG,QAAQ,uDAEnB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nlet amount = null;\nlet step = null;\nlet firstDelay = null;\n\nformRef.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n  gedDataForm();\n  if (checkFormData()) {\n    createNotify();\n  } else {\n    Notify.failure('First delay,delay step and amount cannot be negative');\n  }\n}\nfunction createNotify() {\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    firstDelay += step;\n  }\n}\nfunction checkFormData() {\n  if (step < 0 || firstDelay < 0 || amount <= 0) {\n    return false;\n  }\n  return true;\n}\n\nfunction gedDataForm() {\n  amount = Number(formRef.amount.value);\n  step = Number(formRef.step.value);\n  firstDelay = Number(formRef.delay.value);\n}\n\nfunction createPromise(position, delay) {\n  const data = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$createPromise","position","delay","data","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","amount","value","step","$ce04d3a99e08e73b$var$checkFormData","i","then","Notify","success","catch","failure","$ce04d3a99e08e73b$var$createNotify"],"version":3,"file":"03-promises.e8304a76.js.map"}